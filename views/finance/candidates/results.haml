%hr.page-divider/
.container
  = haml '_header'.to_sym
  - if @result.any?
    - @result.each_with_index do |result, index|
      .col-md-12
        %table.table.table-striped.table-hover.table-condensed
          %tr
            %th.table-heading{:colspan => "15"}
              = index + 1
              = result["name"]
              , (#{result["party"]})
          %tr
            %td.table-title Candidate Profile:
            %td.table-content
              %a{:href => "#{ENV['FINANCE_BASE_URL']}#{result["candidate_url"]}"} Candidate Profile
          %tr
            %td.table-title Race Profile:
            %td.table-content
              %a{:href => "#{ENV['FINANCE_BASE_URL']}#{result["race_url"]}"} Race Profile
          %tr
            %td.table-title Party Profile:
            %td.table-content
              %a{:href => "#{ENV['FINANCE_BASE_URL']}#{result["ie_url"]}"} Party Profile
          %tr
            %td.table-title{:colspan => "1"} FEC ID:
            %td.table-content{:colspan => "14"}= result["fec_id"]
          %tr
            %td.table-title{:colspan => "1"} Incumbent:
            %td.table-content{:colspan => "14"}= convert_boolean(result["is_incumbent"])
          %tr
            %td.table-title{:colspan => "1"} Not Seeking Election:
            %td.table-content{:colspan => "14"}= convert_boolean(result["not_seeking_reelection"])
          %tr
            %td.table-title{:colspan => "1"} Elected:
            %td.table-content{:colspan => "14"}= result["election_year"]
          %tr
            %td.table-title{:colspan => "1"} State:
            %td.table-content{:colspan => "14"}= convert_abbreviation(result["state"])
          %tr
            %td.table-title{:colspan => "1"} Office:
            %td.table-content{:colspan => "14"}= get_chamber(result["office"])
          %tr
            %td.table-title{:colspan => "1"} Outstanding Loans:
            %td.table-content.text-loan{:colspan => "14"}
              $#{comma_numbers(result["outstanding_loans"])}
          %tr
            %td.table-title{:colspan => "1"} Cash on Hand:
            %td.table-content.text-cash{:colspan => "14"}
              $#{comma_numbers(result["cash_on_hand"])}
          %tr
            %td.table-title{:colspan => "1"} Cash Accurate as of:
            %td.table-content{:colspan => "14"}= convert_nil(result["cash_on_hand_date"])
      .chart-container.row
        .col-md-6.chart-container{:id => "expensesChartContainer#{index}"}
        .col-md-6.chart-container{:id => "totalChartContainer#{index}"}
  - else
    = haml '_no_match'.to_sym
:javascript
  $(document).ready(function() {
  
  	// Store json data from ruby into variable 
  	var apiData = #{@result.to_json};
  
  	// Loop over each result 
  	for(var i = 0; i < apiData.length; i++ ) {
  
  		// Build Canvas for 1st Chart
  		var expensesChart = $('<canvas />').attr({
  			id: "expensesChart" + i,
  			width: 450,
  			height: 350
  		});
  
  		// Build Canvas for 2nd Chart 
  		var totalChart = $('<canvas />').attr({
  			id: "totalChart" + i,
  			width: 450,
  			height: 350
  		});
  
  		// Append DOM elements 
  		$('#expensesChartContainer' + i).append(expensesChart);
  		$('#totalChartContainer' + i).append(totalChart);
  
  		// Catch zero to prevent empty expenses chart rendering 
  		if ((apiData[i]["expenditures_supporting"] == 0) && (apiData[i]["expenditures_opposing"] == 0)) {
  
  			// Build no data warning element for expenses chart
  			$('#expensesChartContainer' + i).append('<p class="no-data">No Data to Display</p>')
  											.addClass('no-data-container');
  
  		} else {

  			// Build Valid Charts 
  			var expensesData = {
  				labels: ["$ to Support", "$ to Oppose"],
  				datasets: [
  					{
  						label: "Expenses Chart",
  			            fillColor: "rgba(220,220,220,0.5)",
  			            strokeColor: "rgba(220,220,220,0.8)",
  			            highlightFill: "rgba(220,220,220,0.75)",
  			            highlightStroke: "rgba(220,220,220,1)",
  			            data: [apiData[i]["expenditures_supporting"], apiData[i]["expenditures_opposing"]]
  					}
  				]
  			}
   
  			// Build Expenses Chart 
  			var ctx = $(expensesChart)[0].getContext("2d");
  			var myBarChart = new Chart(ctx).Bar(expensesData);
  		}
  
  		// Catch zero to prevent empty total chart rendering 
  		if ((apiData[i]["total_receipts"] == 0) && (apiData[i]["total_contributions"] == 0) && apiData[i]["total_disbursements"] == 0) {
  			
  			// Build no data warning element for total chart
  			$('#totalChartContainer' + i).append('<p class="no-data">No Data to Display</p>')	
  										 .addClass('no-data-container');
  
  		} else {
  
  			// Construct Totals Chart Data
  			var totalData = { 
  				labels: ["Receipts", "Contributions", "Disbursements"],
  				datasets: [
  					{
  						lable: "Totals Chart",
  					    fillColor: "rgba(220,220,220,0.5)",
  			            strokeColor: "rgba(220,220,220,0.8)",
  			            highlightFill: "rgba(220,220,220,0.75)",
  			            highlightStroke: "rgba(220,220,220,1)",
  			            data: [apiData[i]["total_receipts"], apiData[i]["total_contributions"], apiData[i]["total_disbursements"] ]
  					}
  				]
  			}
  
  			// Build Total Chart
  			var ctx = $(totalChart)[0].getContext("2d");
  			var myBarChart = new Chart(ctx).Bar(totalData);
  		}
  
  	}; //end for loop for creating charts 
  });