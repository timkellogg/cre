post '/bills' do 

	# GovTrack's API uses a different syntax on parameters which necessitates a more verbose syntax 

	@delimiters = ""

	q = params.fetch "q"
	if q.empty?
		q = ""
	else
		@delimiters << "Search Terms: #{q},"
		q = "?q=#{q}" 
	end 

	congress = params.fetch "congress"
	if congress.empty?
		congress = ""
	else 
		@delimiters << "Congressional Session: #{congress},"
		congress = "?congress=#{congress}"
	end 

	introduced_date = params.fetch "introduced_date"
	if introduced_date.empty?
		introduced_date = ""
	else 
		@delimiters << "Introduced on: #{introduced_date},"
		introduced_date = "?introduced_date=#{introduced_date}"
	end 

	sponsor = params.fetch "sponsor"
	if sponsor.empty?
		sponsor = ""
	else 
		@delimiters << "Primary Sponsor id: #{sponsor},"
		sponsor = "?sponsor=#{sponsor}"
	end 

	title = params.fetch "title"
	if title.empty?
		title = ""
	else 
		@delimiters << "Title: #{title},"
		title = "?title=#{title}"
	end 

	response = RestClient::Request.execute(method: :get, url: "https://www.govtrack.us/api/v2/bill
		                                   #{q}#{congress}#{introduced_date}#{sponsor}#{title}" , 
		                                   timeout: 100)
	base	 = JSON.parse(response)
	@result  = base["objects"]

	haml :"bills/results" 
end


post '/bills' do 

	@delimiters = ""

	q = params.fetch "q"
	@delimiters << "Search Terms: #{q}," if !q.empty?

	congress = params.fetch "congress"
	@delimiters << "Congressional Session: #{congress}," if !congress.empty?

	introduced_date = params.fetch "introduced_date"
	@delimiters << "Introduced on: #{introduced_date}," if !introduced_date.empty?

	sponsor = params.fetch "sponsor"
	@delimiters << "Primary Sponsor id: #{sponsor}," if !sponsor.empty?

	title = params.fetch "title"
	@delimiters << "Title: #{title}," if !title.empty? 

	response = RestClient::Request.execute(method: :get,
			                                  url: "https://www.govtrack.us/api/v2/bill",
			                              headers: {params: {
			                              					 :q => q,
															 :congress => congress,
															 :introduced_date => introduced_date,
															 :sponsor => sponsor,
															 :title => title
			                              					 }},
			                             timeout: 100)
	@result	= JSON.parse(response)


	haml :"bills/results" 
end


post '/bills' do 

# This api call doesn't play well with the RestClient syntax that 
# passes in variables so it is using the older, more verbose form. 

	@delimiters = ""

	q = params.fetch "q"
	q.sub!(' ', '_')
	q.sub!(',', '_')
	if q.empty? 
		q = "" 
	else 
		q = "&q=#{q}" 
		@delimiters << "Search Terms: #{q},"
	end 

	state = params.fetch "state"
	state.downcase!
	if state.empty?
		state = ""
	else 
		state = "&state=#{state}" 
		@delimiters << "State: #{state},"
	end 

	chamber = params.fetch "chamber"
	if chamber.empty? 
		chamber = "" 
	else 
		chamber = "&chamber=#{chamber}" 
		@delimiters << "Chamber: #{chamber},"
	end 

	subject = params.fetch "subject"
	if subject.empty? 
		subject = "" 
	else 
		subject = "&subject=#{subject}" 
		@delimiters << "Subject: #{subject},"
	end 

	status = params.fetch "status"
	if status.empty? 
		status = "" 
	else 
		status = "&status=#{status}" 
		@delimiters << "Status: #{status},"
	end 

	sponsor_id = params.fetch "sponsor_id"
    if sponsor_id.empty?
    	sponsor_id = "" 
    else 
    	sponsor_id = "&sponsor_id=#{sponsor_id}" 
    	@delimiters << "Sponsor Id: #{sponsor_id},"
    end 

	type = params.fetch "type"
	if type.empty? 
		type = "" 
	else 
		type = "&type=#{type}" 
		@delimiters << "Type: #{type},"
	end 

	bill_id = params.fetch "bill_id"
	if bill_id.empty? 
		bill_id = "" 
	else 
		bill_id = "&bill_id=#{bill_id}" 
		@delimiters << "Bill Id: #{bill_id},"
	end 

	updated_since = params.fetch "updated_since"
	if updated_since.empty? 
		updated_since = "" 
	else 
		updated_since = "&updated_since=#{updated_since}" 
		@delimiters << "Updated Since: #{updated_since}," 
	end 

	last_action_since = params.fetch "last_action_since"
	if last_action_since.empty? 
		last_action_since = "" 
	else 
		last_action_since = "&last_action_since#{last_action_since}" 
		@delimiters << "Last Action Since: #{last_action_since}"
	end 

	response = RestClient::Request.execute(method: :get, url: "openstates.org/api/v1//bills/#{q}#{state}#{chamber}#{subject}#{status}#{sponsor_id}#{type}#{bill_id}#{updated_since}#{last_action_since}" + ENV['SUNLIGHT_API_KEY'], timeout: 8000)

	@result	= JSON.parse(response)

	haml :"bills/results" 
end

post '/bills' do 

	@delimiters = ""

	q = params.fetch "q"
	@delimiters << "Search Terms: #{q}," if !q.empty?

	state = params.fetch "state"
	state.downcase!
	@delimiters << "State: #{state}," if !state.empty?

	chamber = params.fetch "chamber"
	@delimiters << "Chamber: #{chamber}," if !chamber.empty?

	subject = params.fetch "subject"
	@delimiters << "Subject: #{subject}," if !subject.empty?

	status = params.fetch "status"
	@delimiters << "Status: #{status}," if !status.empty?

	sponsor_id = params.fetch "sponsor_id"
	@delimiters << "Sponsor Id: #{sponsor_id}," if !sponsor_id.empty?

	type = params.fetch "type"
	@delimiters << "Type: #{type}," if !type.empty? 

	bill_id = params.fetch "bill_id"
	@delimiters << "Bill Id: #{bill_id}," if !bill_id.empty?

	updated_since = params.fetch "updated_since"
	@delimiters << "Updated Since: #{updated_since}," if !updated_since.empty?

	last_action_since = params.fetch "last_action_since"
	@delimiters << "Last Action Since: #{last_action_since}," if !last_action_since.empty?

	q.sub!(' ', '_')
	q.sub!(',', '_')

	response = RestClient::Request.execute(method: :get,
			                                  url: "openstates.org/api/v1//bills/",
			                              headers: {params: {
			                              					 :q => q,
			                              					 :state => state,
			                              					 :chamber => chamber,
			                              					 :subject => subject, 
			                              					 :status => status,
			                              					 :sponsor_id => sponsor_id,
			                              					 :type => type,
			                              					 :bill_id => bill_id,
			                              					 :page => 1,
			                              					 :updated_since => updated_since,
			                              					 :last_action_since => last_action_since,
			                              					 :apikey => ENV['SUNLIGHT_API_KEY']}})
	@result	= JSON.parse(response)



	haml :"bills/results" 
end